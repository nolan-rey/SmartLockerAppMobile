using SmartLockerApp.Models;

namespace SmartLockerApp.Services;

/// <summary>
/// Service de gestion des m√©thodes d'authentification via l'API
/// Utilise ApiHttpClient avec authentification JWT automatique
/// </summary>
public class ApiAuthMethodService
{
    private static ApiAuthMethodService? _instance;
    public static ApiAuthMethodService Instance => _instance ??= new ApiAuthMethodService();

    private readonly ApiHttpClient _apiClient;

    private ApiAuthMethodService()
    {
        _apiClient = ApiHttpClient.Instance;
    }

    #region GET - R√©cup√©ration

    /// <summary>
    /// GET /auth_methods - R√©cup√®re toutes les m√©thodes d'authentification
    /// </summary>
    public async Task<List<AuthMethod>?> GetAllAuthMethodsAsync()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("üìã R√©cup√©ration de toutes les m√©thodes d'authentification...");
            
            var authMethods = await _apiClient.GetAsync<List<AuthMethod>>("/auth_methods");
            
            if (authMethods != null)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ {authMethods.Count} m√©thodes r√©cup√©r√©es");
                foreach (var method in authMethods.Take(5))
                {
                    System.Diagnostics.Debug.WriteLine($"   - M√©thode #{method.Id}: User {method.UserId}, Type {method.Type}");
                }
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ö†Ô∏è Aucune m√©thode r√©cup√©r√©e");
            }
            
            return authMethods;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetAllAuthMethods: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// GET /auth_methods/{id} - R√©cup√®re une m√©thode par ID
    /// </summary>
    public async Task<AuthMethod?> GetAuthMethodByIdAsync(int authMethodId)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"üîç R√©cup√©ration m√©thode ID={authMethodId}...");
            
            var authMethod = await _apiClient.GetAsync<AuthMethod>($"/auth_methods/{authMethodId}");
            
            if (authMethod != null)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ M√©thode trouv√©e: User {authMethod.UserId}, Type {authMethod.Type}");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ö†Ô∏è M√©thode non trouv√©e");
            }
            
            return authMethod;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetAuthMethodById: {ex.Message}");
            return null;
        }
    }

    #endregion

    #region POST - Cr√©ation

    /// <summary>
    /// POST /auth_methods - Cr√©e une nouvelle m√©thode d'authentification
    /// Body: {"user_id": 1, "type": "rfid", "credential_value": "RFID-TEST-0001"}
    /// </summary>
    public async Task<(bool Success, string Message, AuthMethod? AuthMethod)> CreateAuthMethodAsync(
        int userId,
        string type,
        string credentialValue)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"‚ûï Cr√©ation m√©thode: User {userId}, Type {type}...");

            var authMethodData = new
            {
                user_id = userId,
                type = type,
                credential_value = credentialValue
            };

            var response = await _apiClient.PostAsync<object, SuccessResponse>("/auth_methods", authMethodData);

            if (response?.success == true)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ M√©thode cr√©√©e");
                
                // R√©cup√©rer la m√©thode cr√©√©e
                var allMethods = await GetAllAuthMethodsAsync();
                var createdMethod = allMethods?
                    .Where(m => m.UserId == userId && m.Type == type && m.CredentialValue == credentialValue)
                    .OrderByDescending(m => m.Id)
                    .FirstOrDefault();
                
                return (true, "M√©thode cr√©√©e avec succ√®s", createdMethod);
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec cr√©ation m√©thode");
                return (false, "√âchec de la cr√©ation de la m√©thode", null);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur CreateAuthMethod: {ex.Message}");
            return (false, $"Erreur: {ex.Message}", null);
        }
    }

    /// <summary>
    /// Cr√©e une m√©thode RFID
    /// </summary>
    public async Task<(bool Success, string Message, AuthMethod? AuthMethod)> CreateRfidMethodAsync(
        int userId,
        string rfidValue)
    {
        return await CreateAuthMethodAsync(userId, "rfid", rfidValue);
    }

    /// <summary>
    /// Cr√©e une m√©thode Fingerprint
    /// </summary>
    public async Task<(bool Success, string Message, AuthMethod? AuthMethod)> CreateFingerprintMethodAsync(
        int userId,
        string fingerprintValue)
    {
        return await CreateAuthMethodAsync(userId, "fingerprint", fingerprintValue);
    }

    #endregion

    #region PUT - Mise √† jour

    /// <summary>
    /// PUT /auth_methods/{id} - Met √† jour une m√©thode d'authentification
    /// Body: {"type": "fingerprint", "credential_value": "FP-XYZ"}
    /// </summary>
    public async Task<(bool Success, string Message)> UpdateAuthMethodAsync(
        int authMethodId,
        string? type = null,
        string? credentialValue = null)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"‚úèÔ∏è Mise √† jour m√©thode ID={authMethodId}...");

            var updateData = new
            {
                type = type,
                credential_value = credentialValue
            };

            var response = await _apiClient.PutAsync<object, SuccessResponse>($"/auth_methods/{authMethodId}", updateData);

            if (response?.success == true)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ M√©thode mise √† jour");
                return (true, "M√©thode mise √† jour avec succ√®s");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec mise √† jour m√©thode");
                return (false, "√âchec de la mise √† jour de la m√©thode");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur UpdateAuthMethod: {ex.Message}");
            return (false, $"Erreur: {ex.Message}");
        }
    }

    #endregion

    #region DELETE - Suppression

    /// <summary>
    /// DELETE /auth_methods/{id} - Supprime une m√©thode d'authentification
    /// </summary>
    public async Task<(bool Success, string Message)> DeleteAuthMethodAsync(int authMethodId)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"üóëÔ∏è Suppression m√©thode ID={authMethodId}...");

            var success = await _apiClient.DeleteAsync($"/auth_methods/{authMethodId}");

            if (success)
            {
                System.Diagnostics.Debug.WriteLine("‚úÖ M√©thode supprim√©e");
                return (true, "M√©thode supprim√©e avec succ√®s");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec suppression m√©thode");
                return (false, "√âchec de la suppression de la m√©thode");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur DeleteAuthMethod: {ex.Message}");
            return (false, $"Erreur: {ex.Message}");
        }
    }

    #endregion

    #region Helpers

    /// <summary>
    /// R√©cup√®re les m√©thodes d'un utilisateur sp√©cifique
    /// </summary>
    public async Task<List<AuthMethod>?> GetUserAuthMethodsAsync(int userId)
    {
        try
        {
            var allMethods = await GetAllAuthMethodsAsync();
            
            if (allMethods == null)
                return null;

            return allMethods.Where(m => m.UserId == userId).ToList();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetUserAuthMethods: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// R√©cup√®re les m√©thodes par type
    /// </summary>
    public async Task<List<AuthMethod>?> GetAuthMethodsByTypeAsync(string type)
    {
        try
        {
            var allMethods = await GetAllAuthMethodsAsync();
            
            if (allMethods == null)
                return null;

            return allMethods.Where(m => m.Type.Equals(type, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetAuthMethodsByType: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// V√©rifie si un utilisateur a une m√©thode d'authentification
    /// </summary>
    public async Task<bool> UserHasAuthMethodAsync(int userId, string type)
    {
        try
        {
            var userMethods = await GetUserAuthMethodsAsync(userId);
            return userMethods?.Any(m => m.Type.Equals(type, StringComparison.OrdinalIgnoreCase)) ?? false;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur UserHasAuthMethod: {ex.Message}");
            return false;
        }
    }

    #endregion

    #region Tests

    /// <summary>
    /// Teste toutes les op√©rations CRUD
    /// </summary>
    public async Task TestAllOperationsAsync()
    {
        System.Diagnostics.Debug.WriteLine("\n=== TEST DES OP√âRATIONS CRUD AUTH METHODS ===\n");

        // 1. GET ALL
        System.Diagnostics.Debug.WriteLine("1Ô∏è‚É£ Test GET /auth_methods");
        var allMethods = await GetAllAuthMethodsAsync();
        if (allMethods != null)
        {
            System.Diagnostics.Debug.WriteLine($"   ‚úÖ {allMethods.Count} m√©thodes r√©cup√©r√©es");
        }

        await Task.Delay(500);

        // 2. GET BY ID
        System.Diagnostics.Debug.WriteLine("\n2Ô∏è‚É£ Test GET /auth_methods/1");
        var method = await GetAuthMethodByIdAsync(1);
        if (method != null)
        {
            System.Diagnostics.Debug.WriteLine($"   ‚úÖ M√©thode: Type {method.Type}, Credential {method.CredentialValue}");
        }

        await Task.Delay(500);

        // 3. CREATE RFID
        System.Diagnostics.Debug.WriteLine("\n3Ô∏è‚É£ Test POST /auth_methods (RFID)");
        var (createSuccess, createMsg, newMethod) = await CreateRfidMethodAsync(1, "RFID-TEST-9999");
        System.Diagnostics.Debug.WriteLine($"   {(createSuccess ? "‚úÖ" : "‚ùå")} {createMsg}");

        await Task.Delay(500);

        if (newMethod != null)
        {
            // 4. UPDATE
            System.Diagnostics.Debug.WriteLine("\n4Ô∏è‚É£ Test PUT /auth_methods/{id}");
            var (updateSuccess, updateMsg) = await UpdateAuthMethodAsync(
                newMethod.Id,
                credentialValue: "RFID-TEST-8888"
            );
            System.Diagnostics.Debug.WriteLine($"   {(updateSuccess ? "‚úÖ" : "‚ùå")} {updateMsg}");

            await Task.Delay(500);

            // 5. DELETE
            System.Diagnostics.Debug.WriteLine("\n5Ô∏è‚É£ Test DELETE /auth_methods/{id}");
            var (deleteSuccess, deleteMsg) = await DeleteAuthMethodAsync(newMethod.Id);
            System.Diagnostics.Debug.WriteLine($"   {(deleteSuccess ? "‚úÖ" : "‚ùå")} {deleteMsg}");
        }

        await Task.Delay(500);

        // 6. GET USER METHODS
        System.Diagnostics.Debug.WriteLine("\n6Ô∏è‚É£ Test Get User Methods");
        var userMethods = await GetUserAuthMethodsAsync(1);
        if (userMethods != null)
        {
            System.Diagnostics.Debug.WriteLine($"   ‚úÖ {userMethods.Count} m√©thode(s) pour l'utilisateur");
        }

        System.Diagnostics.Debug.WriteLine("\n=== FIN DES TESTS ===\n");
    }

    #endregion

    #region DTOs

    /// <summary>
    /// DTO pour les r√©ponses de succ√®s simples
    /// </summary>
    private class SuccessResponse
    {
        public bool success { get; set; }
    }

    #endregion
}
