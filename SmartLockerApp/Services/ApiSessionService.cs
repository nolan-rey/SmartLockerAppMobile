using SmartLockerApp.Models;

namespace SmartLockerApp.Services;

/// <summary>
/// Service de gestion des sessions via l'API
/// Utilise ApiHttpClient avec authentification JWT automatique
/// </summary>
public class ApiSessionService
{
    private readonly ApiHttpClient _apiClient;

    public ApiSessionService(ApiHttpClient apiClient)
    {
        _apiClient = apiClient;
    }

    #region GET - R√©cup√©ration

    /// <summary>
    /// GET /sessions - R√©cup√®re toutes les sessions
    /// </summary>
    public async Task<List<Session>?> GetAllSessionsAsync()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("üìã R√©cup√©ration de toutes les sessions...");
            
            var sessions = await _apiClient.GetAsync<List<Session>>("sessions");
            
            if (sessions != null)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ {sessions.Count} sessions r√©cup√©r√©es");
                foreach (var session in sessions.Take(5))
                {
                    System.Diagnostics.Debug.WriteLine($"   - Session #{session.Id}: User {session.UserId}, Locker {session.LockerId} ({session.Status})");
                }
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ö†Ô∏è Aucune session r√©cup√©r√©e");
            }
            
            return sessions;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetAllSessions: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// GET /sessions/{id} - R√©cup√®re une session par ID
    /// </summary>
    public async Task<Session?> GetSessionByIdAsync(int sessionId)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"üîç R√©cup√©ration session ID={sessionId}...");
            
            var session = await _apiClient.GetAsync<Session>($"sessions/{sessionId}");
            
            if (session != null)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ Session trouv√©e: User {session.UserId}, Locker {session.LockerId} ({session.Status})");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ö†Ô∏è Session non trouv√©e");
            }
            
            return session;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetSessionById: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// GET /me/sessions?status=active - R√©cup√®re les sessions actives de l'utilisateur connect√©
    /// </summary>
    public async Task<List<Session>?> GetMyActiveSessionsAsync()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("üìã R√©cup√©ration des sessions actives de l'utilisateur...");
            
            var sessions = await _apiClient.GetAsync<List<Session>>("me/sessions?status=active");
            
            if (sessions != null)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ {sessions.Count} session(s) active(s)");
                foreach (var session in sessions)
                {
                    System.Diagnostics.Debug.WriteLine($"   - Session #{session.Id}: Locker {session.LockerId}");
                }
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ö†Ô∏è Aucune session active");
            }
            
            return sessions;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetMyActiveSessions: {ex.Message}");
            return null;
        }
    }

    #endregion

    #region POST - Cr√©ation

    /// <summary>
    /// POST /sessions - Cr√©e une nouvelle session
    /// Body: {"user_id": 1, "locker_id": 1, "status": "active"}
    /// </summary>
    public async Task<(bool Success, string Message, Session? Session)> CreateSessionAsync(
        int userId,
        int lockerId,
        string status = "active",
        string? plannedEndAt = null,
        decimal? amountDue = null,
        string currency = "EUR",
        string paymentStatus = "none")
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"‚ûï Cr√©ation session: User {userId}, Locker {lockerId}...");

            var sessionData = new
            {
                user_id = userId,
                locker_id = lockerId,
                status = status,
                planned_end_at = plannedEndAt,
                amount_due = amountDue,
                currency = currency,
                payment_status = paymentStatus
            };

            var response = await _apiClient.PostAsync<object, SuccessResponse>("sessions", sessionData);

            if (response?.success == true)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ Session cr√©√©e");
                
                // R√©cup√©rer la session cr√©√©e (l'API retourne juste success: true)
                var sessions = await GetMyActiveSessionsAsync();
                var createdSession = sessions?.FirstOrDefault(s => s.UserId == userId && s.LockerId == lockerId);
                
                return (true, "Session cr√©√©e avec succ√®s", createdSession);
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec cr√©ation session");
                return (false, "√âchec de la cr√©ation de la session", null);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur CreateSession: {ex.Message}");
            return (false, $"Erreur: {ex.Message}", null);
        }
    }

    /// <summary>
    /// Cr√©e une session avec dur√©e en heures
    /// </summary>
    public async Task<(bool Success, string Message, Session? Session)> CreateSessionWithDurationAsync(
        int userId,
        int lockerId,
        int durationHours,
        decimal pricePerHour = 2.50m)
    {
        var plannedEndAt = DateTime.Now.AddHours(durationHours).ToString("yyyy-MM-dd HH:mm:ss");
        var amountDue = durationHours * pricePerHour;

        return await CreateSessionAsync(
            userId,
            lockerId,
            "active",
            plannedEndAt,
            amountDue,
            "EUR",
            "none"
        );
    }

    #endregion

    #region PUT - Mise √† jour

    /// <summary>
    /// PUT /sessions/{id} - Met √† jour une session
    /// Body: {"status": "finished", "ended_at": "2025-12-31 19:00:00", "payment_status": "paid"}
    /// </summary>
    public async Task<(bool Success, string Message)> UpdateSessionAsync(
        int sessionId,
        string? status = null,
        string? endedAt = null,
        string? paymentStatus = null)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"‚úèÔ∏è Mise √† jour session ID={sessionId}...");

            var updateData = new
            {
                status = status,
                ended_at = endedAt,
                payment_status = paymentStatus
            };

            var response = await _apiClient.PutAsync<object, SuccessResponse>($"sessions/{sessionId}", updateData);

            if (response?.success == true)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ Session mise √† jour");
                return (true, "Session mise √† jour avec succ√®s");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec mise √† jour session");
                return (false, "√âchec de la mise √† jour de la session");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur UpdateSession: {ex.Message}");
            return (false, $"Erreur: {ex.Message}");
        }
    }

    /// <summary>
    /// Termine une session (status=finished, ended_at=now)
    /// </summary>
    public async Task<(bool Success, string Message)> FinishSessionAsync(
        int sessionId,
        string paymentStatus = "paid")
    {
        var endedAt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        return await UpdateSessionAsync(sessionId, "finished", endedAt, paymentStatus);
    }

    #endregion

    #region DELETE - Suppression

    /// <summary>
    /// DELETE /sessions/{id} - Supprime une session
    /// </summary>
    public async Task<(bool Success, string Message)> DeleteSessionAsync(int sessionId)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"üóëÔ∏è Suppression session ID={sessionId}...");

            var success = await _apiClient.DeleteAsync($"sessions/{sessionId}");

            if (success)
            {
                System.Diagnostics.Debug.WriteLine("‚úÖ Session supprim√©e");
                return (true, "Session supprim√©e avec succ√®s");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec suppression session");
                return (false, "√âchec de la suppression de la session");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur DeleteSession: {ex.Message}");
            return (false, $"Erreur: {ex.Message}");
        }
    }

    #endregion

    #region Actions sp√©ciales

    /// <summary>
    /// POST /sessions/{id}/close - Cl√¥ture une session
    /// Body: {"payment_status": "paid"}
    /// Effets: status='finished', ended_at=NOW(), locker.status='available'
    /// </summary>
    public async Task<(bool Success, string Message)> CloseSessionAsync(
        int sessionId,
        string paymentStatus = "paid")
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"üîí Cl√¥ture session ID={sessionId}...");

            var closeData = new
            {
                payment_status = paymentStatus
            };

            var success = await _apiClient.PostAsync($"sessions/{sessionId}/close", closeData);

            if (success)
            {
                System.Diagnostics.Debug.WriteLine("‚úÖ Session cl√¥tur√©e");
                return (true, "Session cl√¥tur√©e avec succ√®s");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec cl√¥ture session");
                return (false, "√âchec de la cl√¥ture de la session");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur CloseSession: {ex.Message}");
            return (false, $"Erreur: {ex.Message}");
        }
    }

    #endregion

    #region Helpers & Statistiques

    /// <summary>
    /// R√©cup√®re les sessions par statut
    /// </summary>
    public async Task<List<Session>?> GetSessionsByStatusAsync(string status)
    {
        try
        {
            var allSessions = await GetAllSessionsAsync();
            
            if (allSessions == null)
                return null;

            return allSessions
                .Where(s => s.Status.Equals(status, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetSessionsByStatus: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// R√©cup√®re les sessions actives
    /// </summary>
    public async Task<List<Session>?> GetActiveSessionsAsync()
    {
        return await GetSessionsByStatusAsync("active");
    }

    /// <summary>
    /// R√©cup√®re les sessions termin√©es
    /// </summary>
    public async Task<List<Session>?> GetFinishedSessionsAsync()
    {
        return await GetSessionsByStatusAsync("finished");
    }

    /// <summary>
    /// R√©cup√®re les sessions d'un utilisateur
    /// </summary>
    public async Task<List<Session>?> GetUserSessionsAsync(int userId)
    {
        try
        {
            var allSessions = await GetAllSessionsAsync();
            
            if (allSessions == null)
                return null;

            return allSessions.Where(s => s.UserId == userId).ToList();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetUserSessions: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// R√©cup√®re les sessions d'un casier
    /// </summary>
    public async Task<List<Session>?> GetLockerSessionsAsync(int lockerId)
    {
        try
        {
            var allSessions = await GetAllSessionsAsync();
            
            if (allSessions == null)
                return null;

            return allSessions.Where(s => s.LockerId == lockerId).ToList();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetLockerSessions: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// Calcule les statistiques des sessions
    /// </summary>
    public async Task<SessionStats?> GetSessionStatisticsAsync()
    {
        try
        {
            var sessions = await GetAllSessionsAsync();
            
            if (sessions == null || sessions.Count == 0)
                return null;

            var stats = new SessionStats
            {
                TotalSessions = sessions.Count,
                ActiveSessions = sessions.Count(s => s.IsActive),
                FinishedSessions = sessions.Count(s => s.IsFinished),
                PaidSessions = sessions.Count(s => s.IsPaid),
                TotalRevenue = sessions.Sum(s => s.AmountDueDecimal),
                AverageSessionDuration = sessions
                    .Where(s => s.TotalDuration.HasValue)
                    .Average(s => s.TotalDuration!.Value.TotalHours)
            };

            System.Diagnostics.Debug.WriteLine("üìä Statistiques sessions:");
            System.Diagnostics.Debug.WriteLine($"   - Total: {stats.TotalSessions}");
            System.Diagnostics.Debug.WriteLine($"   - Actives: {stats.ActiveSessions}");
            System.Diagnostics.Debug.WriteLine($"   - Termin√©es: {stats.FinishedSessions}");
            System.Diagnostics.Debug.WriteLine($"   - Pay√©es: {stats.PaidSessions}");
            System.Diagnostics.Debug.WriteLine($"   - Revenu total: {stats.TotalRevenue:F2} EUR");

            return stats;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetSessionStatistics: {ex.Message}");
            return null;
        }
    }

    #endregion

    #region Tests

    /// <summary>
    /// Teste toutes les op√©rations CRUD
    /// </summary>
    public async Task TestAllOperationsAsync()
    {
        System.Diagnostics.Debug.WriteLine("\n=== TEST DES OP√âRATIONS CRUD SESSIONS ===\n");

        // 1. GET ALL
        System.Diagnostics.Debug.WriteLine("1Ô∏è‚É£ Test GET /sessions");
        var allSessions = await GetAllSessionsAsync();
        if (allSessions != null)
        {
            System.Diagnostics.Debug.WriteLine($"   ‚úÖ {allSessions.Count} sessions r√©cup√©r√©es");
        }

        await Task.Delay(500);

        // 2. GET MY ACTIVE
        System.Diagnostics.Debug.WriteLine("\n2Ô∏è‚É£ Test GET /me/sessions?status=active");
        var myActiveSessions = await GetMyActiveSessionsAsync();
        if (myActiveSessions != null)
        {
            System.Diagnostics.Debug.WriteLine($"   ‚úÖ {myActiveSessions.Count} session(s) active(s)");
        }

        await Task.Delay(500);

        // 3. GET BY ID
        System.Diagnostics.Debug.WriteLine("\n3Ô∏è‚É£ Test GET /sessions/1");
        var session = await GetSessionByIdAsync(1);
        if (session != null)
        {
            System.Diagnostics.Debug.WriteLine($"   ‚úÖ Session: User {session.UserId}, Locker {session.LockerId}");
        }

        await Task.Delay(500);

        // 4. CREATE
        System.Diagnostics.Debug.WriteLine("\n4Ô∏è‚É£ Test POST /sessions");
        var (createSuccess, createMsg, newSession) = await CreateSessionWithDurationAsync(1, 1, 2);
        System.Diagnostics.Debug.WriteLine($"   {(createSuccess ? "‚úÖ" : "‚ùå")} {createMsg}");

        await Task.Delay(500);

        if (newSession != null)
        {
            // 5. UPDATE
            System.Diagnostics.Debug.WriteLine("\n5Ô∏è‚É£ Test PUT /sessions/{id}");
            var (updateSuccess, updateMsg) = await UpdateSessionAsync(newSession.Id, paymentStatus: "paid");
            System.Diagnostics.Debug.WriteLine($"   {(updateSuccess ? "‚úÖ" : "‚ùå")} {updateMsg}");

            await Task.Delay(500);

            // 6. CLOSE
            System.Diagnostics.Debug.WriteLine("\n6Ô∏è‚É£ Test POST /sessions/{id}/close");
            var (closeSuccess, closeMsg) = await CloseSessionAsync(newSession.Id, "paid");
            System.Diagnostics.Debug.WriteLine($"   {(closeSuccess ? "‚úÖ" : "‚ùå")} {closeMsg}");

            await Task.Delay(500);

            // 7. DELETE
            System.Diagnostics.Debug.WriteLine("\n7Ô∏è‚É£ Test DELETE /sessions/{id}");
            var (deleteSuccess, deleteMsg) = await DeleteSessionAsync(newSession.Id);
            System.Diagnostics.Debug.WriteLine($"   {(deleteSuccess ? "‚úÖ" : "‚ùå")} {deleteMsg}");
        }

        await Task.Delay(500);

        // 8. STATISTICS
        System.Diagnostics.Debug.WriteLine("\n8Ô∏è‚É£ Test Statistiques");
        var stats = await GetSessionStatisticsAsync();
        if (stats != null)
        {
            System.Diagnostics.Debug.WriteLine($"   ‚úÖ Statistiques r√©cup√©r√©es");
        }

        System.Diagnostics.Debug.WriteLine("\n=== FIN DES TESTS ===\n");
    }

    #endregion

    #region DTOs

    /// <summary>
    /// DTO pour les r√©ponses de succ√®s simples
    /// </summary>
    private class SuccessResponse
    {
        public bool success { get; set; }
    }

    /// <summary>
    /// Statistiques des sessions
    /// </summary>
    public class SessionStats
    {
        public int TotalSessions { get; set; }
        public int ActiveSessions { get; set; }
        public int FinishedSessions { get; set; }
        public int PaidSessions { get; set; }
        public decimal TotalRevenue { get; set; }
        public double AverageSessionDuration { get; set; }
    }

    #endregion
}
