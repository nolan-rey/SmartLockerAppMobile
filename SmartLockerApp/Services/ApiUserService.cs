using SmartLockerApp.Models;

namespace SmartLockerApp.Services;

/// <summary>
/// Service de gestion des utilisateurs via l'API
/// Utilise ApiHttpClient avec authentification JWT automatique
/// </summary>
public class ApiUserService
{
    private readonly ApiHttpClient _apiClient;

    public ApiUserService(ApiHttpClient apiClient)
    {
        _apiClient = apiClient;
    }

    #region GET - R√©cup√©ration

    /// <summary>
    /// GET /users - R√©cup√®re tous les utilisateurs
    /// </summary>
    public async Task<List<User>?> GetAllUsersAsync()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("üìã R√©cup√©ration de tous les utilisateurs...");
            
            var users = await _apiClient.GetAsync<List<User>>("/users");
            
            if (users != null)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ {users.Count} utilisateurs r√©cup√©r√©s");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ö†Ô∏è Aucun utilisateur r√©cup√©r√©");
            }
            
            return users;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetAllUsers: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// GET /users/{id} - R√©cup√®re un utilisateur par ID
    /// </summary>
    public async Task<User?> GetUserByIdAsync(int userId)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"üîç R√©cup√©ration utilisateur ID={userId}...");
            
            var user = await _apiClient.GetAsync<User>($"/users/{userId}");
            
            if (user != null)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ Utilisateur trouv√©: {user.name}");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ö†Ô∏è Utilisateur non trouv√©");
            }
            
            return user;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetUserById: {ex.Message}");
            return null;
        }
    }

    #endregion

    #region POST - Cr√©ation

    /// <summary>
    /// POST /users - Cr√©e un nouvel utilisateur
    /// </summary>
    public async Task<(bool Success, string Message, User? User)> CreateUserAsync(
        string name,
        string email,
        string passwordHash,
        string role = "user")
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"‚ûï Cr√©ation utilisateur: {name} ({email})...");

            var userData = new
            {
                name = name,
                email = email,
                password_hash = passwordHash,
                role = role
            };

            var createdUser = await _apiClient.PostAsync<object, User>("/users", userData);

            if (createdUser != null)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ Utilisateur cr√©√© avec ID={createdUser.id}");
                return (true, "Utilisateur cr√©√© avec succ√®s", createdUser);
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec cr√©ation utilisateur");
                return (false, "√âchec de la cr√©ation de l'utilisateur", null);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur CreateUser: {ex.Message}");
            return (false, $"Erreur: {ex.Message}", null);
        }
    }

    #endregion

    #region PUT - Mise √† jour

    /// <summary>
    /// PUT /users/{id} - Met √† jour un utilisateur
    /// </summary>
    public async Task<(bool Success, string Message, User? User)> UpdateUserAsync(
        int userId,
        string? name = null,
        string? email = null,
        string? role = null)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"‚úèÔ∏è Mise √† jour utilisateur ID={userId}...");

            var updateData = new
            {
                name = name,
                email = email,
                role = role
            };

            var updatedUser = await _apiClient.PutAsync<object, User>($"/users/{userId}", updateData);

            if (updatedUser != null)
            {
                System.Diagnostics.Debug.WriteLine($"‚úÖ Utilisateur mis √† jour: {updatedUser.name}");
                return (true, "Utilisateur mis √† jour avec succ√®s", updatedUser);
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec mise √† jour utilisateur");
                return (false, "√âchec de la mise √† jour de l'utilisateur", null);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur UpdateUser: {ex.Message}");
            return (false, $"Erreur: {ex.Message}", null);
        }
    }

    #endregion

    #region DELETE - Suppression

    /// <summary>
    /// DELETE /users/{id} - Supprime un utilisateur
    /// </summary>
    public async Task<(bool Success, string Message)> DeleteUserAsync(int userId)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"üóëÔ∏è Suppression utilisateur ID={userId}...");

            var success = await _apiClient.DeleteAsync($"/users/{userId}");

            if (success)
            {
                System.Diagnostics.Debug.WriteLine("‚úÖ Utilisateur supprim√©");
                return (true, "Utilisateur supprim√© avec succ√®s");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚ùå √âchec suppression utilisateur");
                return (false, "√âchec de la suppression de l'utilisateur");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur DeleteUser: {ex.Message}");
            return (false, $"Erreur: {ex.Message}");
        }
    }

    #endregion

    #region Tests

    /// <summary>
    /// Teste toutes les op√©rations CRUD
    /// </summary>
    public async Task TestAllOperationsAsync()
    {
        System.Diagnostics.Debug.WriteLine("\n=== TEST DES OP√âRATIONS CRUD USERS ===\n");

        // 1. GET ALL
        System.Diagnostics.Debug.WriteLine("1Ô∏è‚É£ Test GET /users");
        var allUsers = await GetAllUsersAsync();
        if (allUsers != null)
        {
            System.Diagnostics.Debug.WriteLine($"   ‚úÖ {allUsers.Count} utilisateurs r√©cup√©r√©s");
        }

        await Task.Delay(500);

        // 2. GET BY ID
        System.Diagnostics.Debug.WriteLine("\n2Ô∏è‚É£ Test GET /users/1");
        var user = await GetUserByIdAsync(1);
        if (user != null)
        {
            System.Diagnostics.Debug.WriteLine($"   ‚úÖ Utilisateur: {user.name} ({user.email})");
        }

        await Task.Delay(500);

        // 3. CREATE
        System.Diagnostics.Debug.WriteLine("\n3Ô∏è‚É£ Test POST /users");
        var (createSuccess, createMsg, newUser) = await CreateUserAsync(
            "Test User",
            "test@smartlocker.com",
            "hashedpassword123",
            "user"
        );
        System.Diagnostics.Debug.WriteLine($"   {(createSuccess ? "‚úÖ" : "‚ùå")} {createMsg}");

        await Task.Delay(500);

        if (newUser != null)
        {
            // 4. UPDATE
            System.Diagnostics.Debug.WriteLine("\n4Ô∏è‚É£ Test PUT /users/{id}");
            var (updateSuccess, updateMsg, updatedUser) = await UpdateUserAsync(
                newUser.id,
                name: "Test User Updated"
            );
            System.Diagnostics.Debug.WriteLine($"   {(updateSuccess ? "‚úÖ" : "‚ùå")} {updateMsg}");

            await Task.Delay(500);

            // 5. DELETE
            System.Diagnostics.Debug.WriteLine("\n5Ô∏è‚É£ Test DELETE /users/{id}");
            var (deleteSuccess, deleteMsg) = await DeleteUserAsync(newUser.id);
            System.Diagnostics.Debug.WriteLine($"   {(deleteSuccess ? "‚úÖ" : "‚ùå")} {deleteMsg}");
        }

        System.Diagnostics.Debug.WriteLine("\n=== FIN DES TESTS ===\n");
    }

    #endregion
}
