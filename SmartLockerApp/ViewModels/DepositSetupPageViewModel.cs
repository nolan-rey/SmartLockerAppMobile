using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SmartLockerApp.Services;
using SmartLockerApp.Interfaces;

namespace SmartLockerApp.ViewModels;

/// <summary>
/// ViewModel pour la page de configuration de d√©p√¥t
/// </summary>
[QueryProperty(nameof(LockerId), "lockerId")]
public partial class DepositSetupPageViewModel : BaseViewModel
{
    private readonly IDataService _dataService;

    #region Observable Properties

    [ObservableProperty]
    private string lockerId = string.Empty;

    [ObservableProperty]
    private string selectedDuration = "1 heure";

    [ObservableProperty]
    private string selectedPrice = "4,00 ‚Ç¨";

    [ObservableProperty]
    private double selectedHours = 1.0;

    [ObservableProperty]
    private bool isOption30MinSelected;

    [ObservableProperty]
    private bool isOption1HourSelected = true;

    [ObservableProperty]
    private bool isOption2HoursSelected;

    [ObservableProperty]
    private bool isOption4HoursSelected;

    [ObservableProperty]
    private string price30Min = "2,50 ‚Ç¨";

    [ObservableProperty]
    private string price1Hour = "4,00 ‚Ç¨";

    [ObservableProperty]
    private string price2Hours = "7,00 ‚Ç¨";

    [ObservableProperty]
    private string price4Hours = "12,00 ‚Ç¨";

    [ObservableProperty]
    private string confirmButtonText = "Confirmer";

    [ObservableProperty]
    private bool isConfirmButtonEnabled = true;

    #endregion

    public DepositSetupPageViewModel(IDataService dataService)
    {
        _dataService = dataService;
        Title = "Configuration";
        
        // Initialiser avec 1 heure par d√©faut
        UpdatePricing();
    }

    #region Commands

    [RelayCommand]
    private async Task LoadData()
    {
        System.Diagnostics.Debug.WriteLine("üîÑ Chargement DepositSetupPage...");
        
        // V√©rifier que l'utilisateur est connect√©
        var currentUser = await _dataService.GetCurrentUserAsync();
        if (currentUser == null)
        {
            System.Diagnostics.Debug.WriteLine("‚ùå Utilisateur non connect√© sur DepositSetupPage");
            await Shell.Current.DisplayAlert("Erreur", "Vous devez √™tre connect√© pour continuer", "OK");
            await Shell.Current.GoToAsync("//LoginPage");
            return;
        }
        
        System.Diagnostics.Debug.WriteLine($"‚úÖ Utilisateur connect√©: {currentUser.name} (ID: {currentUser.id})");
        
        if (!string.IsNullOrEmpty(LockerId))
        {
            System.Diagnostics.Debug.WriteLine($"‚úÖ Casier s√©lectionn√©: {LockerId}");
            LoadLockerDetails();
        }
        UpdatePricing();
    }

    [RelayCommand]
    private void Select30Min()
    {
        ResetSelections();
        IsOption30MinSelected = true;
        UpdateSelection("30 minutes", CalculatePrice(0.5), 0.5);
    }

    [RelayCommand]
    private void Select1Hour()
    {
        ResetSelections();
        IsOption1HourSelected = true;
        UpdateSelection("1 heure", CalculatePrice(1.0), 1.0);
    }

    [RelayCommand]
    private void Select2Hours()
    {
        ResetSelections();
        IsOption2HoursSelected = true;
        UpdateSelection("2 heures", CalculatePrice(2.0), 2.0);
    }

    [RelayCommand]
    private void Select4Hours()
    {
        ResetSelections();
        IsOption4HoursSelected = true;
        UpdateSelection("4 heures", CalculatePrice(4.0), 4.0);
    }

    [RelayCommand]
    private async Task Confirm()
    {
        if (IsBusy) return;

        IsBusy = true;
        ConfirmButtonText = "V√©rification...";
        IsConfirmButtonEnabled = false;

        try
        {
            System.Diagnostics.Debug.WriteLine("‚úÖ Confirmation de la dur√©e de d√©p√¥t");
            
            // V√©rifier que l'utilisateur est toujours connect√©
            var currentUser = await _dataService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                System.Diagnostics.Debug.WriteLine("‚ùå Utilisateur non connect√©");
                await Shell.Current.DisplayAlert("Erreur", "Vous devez √™tre connect√© pour continuer", "OK");
                await Shell.Current.GoToAsync("//LoginPage");
                return;
            }
            
            System.Diagnostics.Debug.WriteLine($"‚úÖ Utilisateur: {currentUser.name} (ID: {currentUser.id})");
            System.Diagnostics.Debug.WriteLine($"‚úÖ Casier: {LockerId}");
            System.Diagnostics.Debug.WriteLine($"‚úÖ Dur√©e: {SelectedHours} heure(s)");
            System.Diagnostics.Debug.WriteLine($"‚úÖ Prix: {SelectedPrice}");
            
            ConfirmButtonText = "‚úì Confirm√©";
            
            // Naviguer vers OpenLockerPage avec les param√®tres (PAS de cr√©ation de session ici)
            await Shell.Current.GoToAsync($"//OpenLockerPage?lockerId={LockerId}&durationHours={SelectedHours}&price={SelectedPrice.Replace(" ‚Ç¨", "")}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"‚ùå Erreur: {ex.Message}");
            await Shell.Current.DisplayAlert("Erreur", $"Une erreur s'est produite : {ex.Message}", "OK");
        }
        finally
        {
            IsBusy = false;
            ConfirmButtonText = "Confirmer";
            IsConfirmButtonEnabled = true;
        }
    }

    [RelayCommand]
    private async Task NavigateBack()
    {
        await Shell.Current.GoToAsync("..");
    }

    #endregion

    #region Private Methods

    private void ResetSelections()
    {
        IsOption30MinSelected = false;
        IsOption1HourSelected = false;
        IsOption2HoursSelected = false;
        IsOption4HoursSelected = false;
    }

    private void UpdateSelection(string duration, decimal price, double hours)
    {
        SelectedDuration = duration;
        SelectedPrice = $"{price:F2} ‚Ç¨";
        SelectedHours = hours;
    }

    private void LoadLockerDetails()
    {
        // Charger les d√©tails du casier si n√©cessaire
        // Pour l'instant, on utilise les prix calcul√©s dynamiquement
    }

    private decimal CalculatePrice(double hours)
    {
        return hours switch
        {
            0.5 => 2.50m,
            1.0 => 4.00m,
            2.0 => 7.00m,
            4.0 => 12.00m,
            _ => 4.00m
        };
    }

    private void UpdatePricing()
    {
        Price30Min = $"{CalculatePrice(0.5):F2} ‚Ç¨";
        Price1Hour = $"{CalculatePrice(1.0):F2} ‚Ç¨";
        Price2Hours = $"{CalculatePrice(2.0):F2} ‚Ç¨";
        Price4Hours = $"{CalculatePrice(4.0):F2} ‚Ç¨";
    }

    private string MapLockerIdToServiceId(string? homePageLockerId)
    {
        return homePageLockerId switch
        {
            "A1" => "L001",
            "B2" => "L002",
            _ => "L001"
        };
    }

    #endregion
}
